package cn.org.act.internetos.api.client;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;

import javax.servlet.AsyncContext;
import javax.servlet.AsyncEvent;
import javax.servlet.AsyncListener;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class EventComet
 */
@WebServlet(urlPatterns={"/clientevent"},asyncSupported=true)
public class EventComet extends HttpServlet {
	private static final long serialVersionUID = 1L;
     
	//private ExecutorService executorService = Executors.newFixedThreadPool(10);
	private static final Queue<AsyncContext> asyncContextQueue = new ConcurrentLinkedQueue<AsyncContext>();
	private static final BlockingQueue<String> messageQueue = new LinkedBlockingQueue<String>();
	
	private Thread notifierThread = null;  
	
	public void init(){
		Runnable notifierRunnable = new Runnable() {  
            public void run() {  
                boolean done = false;  
                while (!done) {  
                    String cMessage = null;  
                    try {  
                        cMessage = messageQueue.take();  
                        for (AsyncContext ac : asyncContextQueue) {  
                            try {  
                                PrintWriter acWriter = ac.getResponse().getWriter();  
                                acWriter.println(cMessage);  
                                acWriter.flush();  
                            } catch(IOException ex) {  
                                System.out.println(ex);  
                                asyncContextQueue.remove(ac);  
                            }  
                        }  
                    } catch(InterruptedException iex) {  
                        done = true;  
                        System.out.println(iex);  
                    }  
                }  
            }  
        };  
        notifierThread = new Thread(notifierRunnable);  
        notifierThread.start();  
	}
	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		final AsyncContext aCtx = request.startAsync(request, response);
		
		aCtx.addListener(new AsyncListener(){

			@Override
			public void onComplete(AsyncEvent arg0) throws IOException {
				asyncContextQueue.remove(aCtx);				
			}

			@Override
			public void onError(AsyncEvent arg0) throws IOException {
				asyncContextQueue.remove(aCtx);
			}

			@Override
			public void onStartAsync(AsyncEvent arg0) throws IOException {

			}

			@Override
			public void onTimeout(AsyncEvent arg0) throws IOException {
				arg0.getAsyncContext().getResponse().getWriter().write("time out");
				arg0.getAsyncContext().complete();
				asyncContextQueue.remove(aCtx);
			}
			});
		asyncContextQueue.add(aCtx);
		//executorService.submit(new AsyncRequest(aCtx));
		
	}
	
	public static void notify(String cMessage) throws IOException {  
        try {  
            messageQueue.put(cMessage);  
        } catch(Exception ex) {  
            IOException t = new IOException();  
            t.initCause(ex);  
            throw t;  
        }  
    }  
	
	@Override  
    public void destroy() {  
		asyncContextQueue.clear();  
        notifierThread.interrupt();  
    }  
}

class AsyncRequest implements Runnable{

	private AsyncContext aCtx;
	public AsyncRequest(AsyncContext aCtx) {
		this.aCtx = aCtx;
	}

	@Override
	public void run() {
		
//		
//		new Thread( new Runnable(){
//			
//			@Override
//			public void run() {
//				try {
//					Thread.sleep(1000);
//					PrintWriter out = aCtx.getResponse().getWriter();
//					out.write("1");
//					Thread.sleep(1000);
//					out.write("2");
//					aCtx.complete();
//				} catch (IOException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//			}
//			
//		}).start();
		
	}
	
}
