package cn.org.act.internetos.persist.cassandra;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import cn.org.act.internetos.persist.Application;
import cn.org.act.internetos.persist.IAppDAO;

import me.prettyprint.cassandra.serializers.StringSerializer;
import me.prettyprint.cassandra.service.CassandraHostConfigurator;
import me.prettyprint.hector.api.Cluster;
import me.prettyprint.hector.api.Keyspace;
import me.prettyprint.hector.api.beans.HColumn;
import me.prettyprint.hector.api.factory.HFactory;
import me.prettyprint.hector.api.mutation.Mutator;

import org.apache.cassandra.thrift.Cassandra;  
import org.apache.cassandra.thrift.Column;  
import org.apache.cassandra.thrift.ColumnPath;  
import org.apache.cassandra.thrift.ConsistencyLevel;  
import org.apache.cassandra.thrift.InvalidRequestException;  
import org.apache.cassandra.thrift.NotFoundException;  
import org.apache.cassandra.thrift.TimedOutException;  
import org.apache.cassandra.thrift.UnavailableException;  
import org.apache.cassandra.utils.UUIDGen;
import org.apache.thrift.TException;  
import org.apache.thrift.protocol.TBinaryProtocol;  
import org.apache.thrift.transport.TSocket;  
import org.apache.thrift.transport.TTransport;  
import org.apache.thrift.transport.TTransportException;  

public class AppCassandraDAO implements IAppDAO{

	Mutator<String> mutator;
	StringSerializer stringSerializer = new StringSerializer();
	public AppCassandraDAO(String server,String keyspaceName){
		Cluster cluster = HFactory.getOrCreateCluster("TestCluster",
			    new CassandraHostConfigurator(server));
		Keyspace keyspace = HFactory.createKeyspace(keyspaceName, cluster);
		mutator = HFactory.createMutator(keyspace,stringSerializer);
		
	}
	
	@Override
	public List<Application> getApps(String user) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String addApp(Application app) {
		ArrayList<HColumn<String,String>> columns = new ArrayList<HColumn<String,String>>();
		
		columns.add(HFactory.createStringColumn("name", app.getName()));
		columns.add(HFactory.createStringColumn("config",app.getConfig()));
		String appID = UUID.randomUUID().toString();
		mutator.insert(app.getUser(), "Applications", HFactory.createSuperColumn(
				appID, columns, stringSerializer, stringSerializer, stringSerializer));
		return appID;
	}

}
